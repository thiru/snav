#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

#|
Command-line interface for snav
|#

(declaim (optimize (safety 1) (speed 3)))

(ros:ensure-asdf)
(ql:quickload '(snav) :silent nil)

(defpackage :snav-cli
  (:documentation "Command-line interface for snav")
  (:use :cl :glu :snav))

(in-package :snav-cli)

(defun show-help ()
  (format t "~&snav v~A (~A)

Usage: snav [options] command [args]
             
snav is a window, workspace and monitor navigator for X

Commands:

  workspace [<NUM> | prev | next | last]
    <NUM> should be a positive integer
    The 'prev' and 'next' commands wrap to the last and first workspace
    The 'last' command goes to the last viewed workspace

  focus [up | down | left | right]
    Focus the window specified by a relative position

  help, --help, -h
    Show this message

  version, --version, -v
    Show version information

Options:

  --debug, -d
    Whether to run the app in debug mode. Default is non-debug mode.
    Specifying this option will:
    * Increase logging verbosity
    * Initiate the debugger on exeptions
    * Show additional Lisp errors
" (app-info-version *app-info*) (pretty-time (app-info-last-updated *app-info*))))

(defun handle-snav-cmd-r (result)
  (if (failed? result)
    (progn
      (format t "~A~%" (r-message result))
      2)
    0))

(defun main (&rest args)
  (cond (;; Help
         (or (empty? args)
             (string-equal "-h" (first args))
             (string-equal "--help" (first args))
             (string-equal "help" (first args)))
         (show-help))

        ;; Version
        ((or (string-equal "-v" (first args))
             (string-equal "--version" (first args))
             (string-equal "version" (first args)))
         (format t "snav version ~A (updated ~A)~%"
                 (app-info-version *app-info*)
                 (pretty-time (app-info-last-updated *app-info*))))

        ;; Workspaces navigation
        ((string-equal "workspace" (first args))
         (when (empty? (second args))
           (format t "The 'workspace' command requires an argument. See 'snav help'.~%")
           (return-from main 1))
         (if (starts-with "prev" (second args))
           (return-from main (handle-snav-cmd-r (go-to-previous-workspace))))
         (if (string-equal "next" (second args))
           (return-from main (handle-snav-cmd-r (go-to-next-workspace))))
         (if (string-equal "last" (second args))
           (return-from main (handle-snav-cmd-r (go-to-last-active-workspace))))
         (return-from main
                      (handle-snav-cmd-r
                        (go-to-workspace (loose-parse-int (second args))))))

        ;; Window focusing
        ((string-equal "focus" (first args))
         (when (empty? (second args))
           (format t "The 'focus' command requires an argument. See 'snav help'.~%")
           (return-from main 1))
         (return-from main (handle-snav-cmd-r (focus-window (second args)))))
        ((not (empty? args))
         (format t
                 "snav: '~A' is not a recognised command. See 'snav help'.~%"
                 (first args))
         (return-from main 1))

        ;; Show help by default
        (t (show-help)))
  0)
;;; vim: set ft=lisp lisp:
