#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

#|
Command-line interface for snav
|#

(declaim (optimize (safety 1) (speed 3)))

(ros:ensure-asdf)
(ql:quickload '(snav) :silent nil)

(defpackage :snav-cli
  (:documentation "Command-line interface for snav")
  (:use :cl :glu :snav))

(in-package :snav-cli)

(defun show-help ()
  (format t "~&snav (Screen Navigator) v~A (~A)

Usage: snav [options]
             
snav is a screen a window navigator for X

Commands:

  go-to-workspace <NUM>
    Go to the specified workspace (1-based index).
    Giving 0 will go to the first workspace.

  go-to-next-workspace
    Go to the next ordinal workspace (wrap to first if on last)

  go-to-previous-workspace
    Go to the previous ordinal workspace (wrap to last if on first)

  go-to-last-active-workspace
    Go to the last active workspace (default to 1)

  help, --help, -h
    Show this message

  version, --version, -v
    Show version information

Options:

  --debug, -d
    Whether to run the app in debug mode. Default is non-debug mode.
    Specifying this option will:
    * Increase logging verbosity
    * Initiate the debugger on exeptions
    * Show additional Lisp errors
" (app-info-version *app-info*) (pretty-time (app-info-last-updated *app-info*))))

(defun main (&rest args)
  (let* ((ret-code 0))
    (cond ((or (empty? args)
               (string-equal "-h" (first args))
               (string-equal "--help" (first args))
               (string-equal "help" (first args)))
           (show-help))
          ((or (string-equal "-v" (first args))
               (string-equal "--version" (first args))
               (string-equal "version" (first args)))
           (format t "snav version ~A (updated ~A)~%"
                   (app-info-version *app-info*)
                   (pretty-time (app-info-last-updated *app-info*))))
          ((string-equal "go-to-workspace" (first args))
           (go-to-workspace (loose-parse-int (second args))))
          ((string-equal "go-to-next-workspace" (first args))
           (go-to-next-workspace))
          ((string-equal "go-to-previous-workspace" (first args))
           (go-to-previous-workspace))
          ((string-equal "go-to-last-active-workspace" (first args))
           (go-to-last-active-workspace))
          ((not (empty? args))
           (format t
                   "snav: '~A' is not a recognised command. See 'snav help'.~%"
                   (first args))
           (setf ret-code 1))
          (t (show-help)))
    ret-code))
;;; vim: set ft=lisp lisp:
